{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\souha\\\\Desktop\\\\PFE Mast\\xE9re\\\\Getlearn1\\\\app_getlearn\\\\front\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\souha\\\\Desktop\\\\PFE Mast\\xE9re\\\\Getlearn1\\\\app_getlearn\\\\front\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar httpProxy = require(\"http-proxy\");\n\nvar _ = require(\"lodash\");\n\nvar config_factory_1 = require(\"./config-factory\");\n\nvar contextMatcher = require(\"./context-matcher\");\n\nvar handlers = require(\"./handlers\");\n\nvar logger_1 = require(\"./logger\");\n\nvar PathRewriter = require(\"./path-rewriter\");\n\nvar Router = require(\"./router\");\n\nvar HttpProxyMiddleware = function HttpProxyMiddleware(context, opts) {\n  var _this = this;\n\n  _classCallCheck(this, HttpProxyMiddleware);\n\n  this.logger = logger_1.getInstance();\n  this.wsInternalSubscribed = false; // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n\n  this.middleware = function (req, res, next) {\n    return __awaiter(_this, void 0, void 0,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var activeProxyOptions;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.shouldProxy(this.config.context, req)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 3;\n              return this.prepareProxyRequest(req);\n\n            case 3:\n              activeProxyOptions = _context.sent;\n              this.proxy.web(req, res, activeProxyOptions);\n              _context.next = 8;\n              break;\n\n            case 7:\n              next();\n\n            case 8:\n              if (this.proxyOptions.ws === true) {\n                // use initial request to access the server object to subscribe to http upgrade event\n                this.catchUpgradeRequest(req.connection.server);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n  };\n\n  this.catchUpgradeRequest = function (server) {\n    if (!_this.wsInternalSubscribed) {\n      server.on('upgrade', _this.handleUpgrade); // prevent duplicate upgrade handling;\n      // in case external upgrade is also configured\n\n      _this.wsInternalSubscribed = true;\n    }\n  };\n\n  this.handleUpgrade = function (req, socket, head) {\n    return __awaiter(_this, void 0, void 0,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var activeProxyOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.shouldProxy(this.config.context, req)) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 3;\n              return this.prepareProxyRequest(req);\n\n            case 3:\n              activeProxyOptions = _context2.sent;\n              this.proxy.ws(req, socket, head, activeProxyOptions);\n              this.logger.info('[HPM] Upgrading to WebSocket');\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n  /**\n   * Determine whether request should be proxied.\n   *\n   * @private\n   * @param  {String} context [description]\n   * @param  {Object} req     [description]\n   * @return {Boolean}\n   */\n\n\n  this.shouldProxy = function (context, req) {\n    var path = req.originalUrl || req.url;\n    return contextMatcher.match(context, path, req);\n  };\n  /**\n   * Apply option.router and option.pathRewrite\n   * Order matters:\n   *    Router uses original path for routing;\n   *    NOT the modified path, after it has been rewritten by pathRewrite\n   * @param {Object} req\n   * @return {Object} proxy options\n   */\n\n\n  this.prepareProxyRequest = function (req) {\n    return __awaiter(_this, void 0, void 0,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var originalPath, newProxyOptions, arrow;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // https://github.com/chimurai/http-proxy-middleware/issues/17\n              // https://github.com/chimurai/http-proxy-middleware/issues/94\n              req.url = req.originalUrl || req.url; // store uri before it gets rewritten for logging\n\n              originalPath = req.url;\n              newProxyOptions = _.assign({}, this.proxyOptions); // Apply in order:\n              // 1. option.router\n              // 2. option.pathRewrite\n\n              _context3.next = 5;\n              return this.applyRouter(req, newProxyOptions);\n\n            case 5:\n              _context3.next = 7;\n              return this.applyPathRewrite(req, this.pathRewriter);\n\n            case 7:\n              // debug logging for both http(s) and websockets\n              if (this.proxyOptions.logLevel === 'debug') {\n                arrow = logger_1.getArrow(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);\n                this.logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n              }\n\n              return _context3.abrupt(\"return\", newProxyOptions);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n  }; // Modify option.target when router present.\n\n\n  this.applyRouter = function (req, options) {\n    return __awaiter(_this, void 0, void 0,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var newTarget;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!options.router) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 3;\n              return Router.getTarget(req, options);\n\n            case 3:\n              newTarget = _context4.sent;\n\n              if (newTarget) {\n                this.logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n                options.target = newTarget;\n              }\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n  }; // rewrite path\n\n\n  this.applyPathRewrite = function (req, pathRewriter) {\n    return __awaiter(_this, void 0, void 0,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var path;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!pathRewriter) {\n                _context5.next = 5;\n                break;\n              }\n\n              _context5.next = 3;\n              return pathRewriter(req.url, req);\n\n            case 3:\n              path = _context5.sent;\n\n              if (typeof path === 'string') {\n                req.url = path;\n              } else {\n                this.logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n              }\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n  };\n\n  this.logError = function (err, req, res) {\n    var hostname = req.headers && req.headers.host || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n\n    var target = _this.proxyOptions.target.host || _this.proxyOptions.target;\n    var errorMessage = '[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)';\n    var errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n\n    _this.logger.error(errorMessage, req.url, hostname, target, err.code || err, errReference);\n  };\n\n  this.config = config_factory_1.createConfig(context, opts);\n  this.proxyOptions = this.config.options; // create proxy\n\n  this.proxy = httpProxy.createProxyServer({});\n  this.logger.info(\"[HPM] Proxy created: \".concat(this.config.context, \"  -> \").concat(this.proxyOptions.target));\n  this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n  // attach handler to http-proxy events\n\n  handlers.init(this.proxy, this.proxyOptions); // log errors for debug purpose\n\n  this.proxy.on('error', this.logError); // https://github.com/chimurai/http-proxy-middleware/issues/19\n  // expose function to upgrade externally\n\n  this.middleware.upgrade = function (req, socket, head) {\n    if (!_this.wsInternalSubscribed) {\n      _this.handleUpgrade(req, socket, head);\n    }\n  };\n};\n\nexports.HttpProxyMiddleware = HttpProxyMiddleware;","map":{"version":3,"sources":["C:/Users/souha/Desktop/PFE Mastére/Getlearn1/app_getlearn/front/node_modules/http-proxy-middleware/dist/http-proxy-middleware.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","httpProxy","require","_","config_factory_1","contextMatcher","handlers","logger_1","PathRewriter","Router","HttpProxyMiddleware","context","opts","logger","getInstance","wsInternalSubscribed","middleware","req","res","shouldProxy","config","prepareProxyRequest","activeProxyOptions","proxy","web","proxyOptions","ws","catchUpgradeRequest","connection","server","on","handleUpgrade","socket","head","info","path","originalUrl","url","match","originalPath","newProxyOptions","assign","applyRouter","applyPathRewrite","pathRewriter","logLevel","arrow","getArrow","target","debug","method","options","router","getTarget","newTarget","logError","err","hostname","headers","host","errorMessage","errReference","error","code","createConfig","createProxyServer","createPathRewriter","pathRewrite","init","upgrade"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst httpProxy = require(\"http-proxy\");\nconst _ = require(\"lodash\");\nconst config_factory_1 = require(\"./config-factory\");\nconst contextMatcher = require(\"./context-matcher\");\nconst handlers = require(\"./handlers\");\nconst logger_1 = require(\"./logger\");\nconst PathRewriter = require(\"./path-rewriter\");\nconst Router = require(\"./router\");\nclass HttpProxyMiddleware {\n    constructor(context, opts) {\n        this.logger = logger_1.getInstance();\n        this.wsInternalSubscribed = false;\n        // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n        this.middleware = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            if (this.shouldProxy(this.config.context, req)) {\n                const activeProxyOptions = yield this.prepareProxyRequest(req);\n                this.proxy.web(req, res, activeProxyOptions);\n            }\n            else {\n                next();\n            }\n            if (this.proxyOptions.ws === true) {\n                // use initial request to access the server object to subscribe to http upgrade event\n                this.catchUpgradeRequest(req.connection.server);\n            }\n        });\n        this.catchUpgradeRequest = server => {\n            if (!this.wsInternalSubscribed) {\n                server.on('upgrade', this.handleUpgrade);\n                // prevent duplicate upgrade handling;\n                // in case external upgrade is also configured\n                this.wsInternalSubscribed = true;\n            }\n        };\n        this.handleUpgrade = (req, socket, head) => __awaiter(this, void 0, void 0, function* () {\n            if (this.shouldProxy(this.config.context, req)) {\n                const activeProxyOptions = yield this.prepareProxyRequest(req);\n                this.proxy.ws(req, socket, head, activeProxyOptions);\n                this.logger.info('[HPM] Upgrading to WebSocket');\n            }\n        });\n        /**\n         * Determine whether request should be proxied.\n         *\n         * @private\n         * @param  {String} context [description]\n         * @param  {Object} req     [description]\n         * @return {Boolean}\n         */\n        this.shouldProxy = (context, req) => {\n            const path = req.originalUrl || req.url;\n            return contextMatcher.match(context, path, req);\n        };\n        /**\n         * Apply option.router and option.pathRewrite\n         * Order matters:\n         *    Router uses original path for routing;\n         *    NOT the modified path, after it has been rewritten by pathRewrite\n         * @param {Object} req\n         * @return {Object} proxy options\n         */\n        this.prepareProxyRequest = (req) => __awaiter(this, void 0, void 0, function* () {\n            // https://github.com/chimurai/http-proxy-middleware/issues/17\n            // https://github.com/chimurai/http-proxy-middleware/issues/94\n            req.url = req.originalUrl || req.url;\n            // store uri before it gets rewritten for logging\n            const originalPath = req.url;\n            const newProxyOptions = _.assign({}, this.proxyOptions);\n            // Apply in order:\n            // 1. option.router\n            // 2. option.pathRewrite\n            yield this.applyRouter(req, newProxyOptions);\n            yield this.applyPathRewrite(req, this.pathRewriter);\n            // debug logging for both http(s) and websockets\n            if (this.proxyOptions.logLevel === 'debug') {\n                const arrow = logger_1.getArrow(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);\n                this.logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n            }\n            return newProxyOptions;\n        });\n        // Modify option.target when router present.\n        this.applyRouter = (req, options) => __awaiter(this, void 0, void 0, function* () {\n            let newTarget;\n            if (options.router) {\n                newTarget = yield Router.getTarget(req, options);\n                if (newTarget) {\n                    this.logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n                    options.target = newTarget;\n                }\n            }\n        });\n        // rewrite path\n        this.applyPathRewrite = (req, pathRewriter) => __awaiter(this, void 0, void 0, function* () {\n            if (pathRewriter) {\n                const path = yield pathRewriter(req.url, req);\n                if (typeof path === 'string') {\n                    req.url = path;\n                }\n                else {\n                    this.logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n                }\n            }\n        });\n        this.logError = (err, req, res) => {\n            const hostname = (req.headers && req.headers.host) || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n            const target = this.proxyOptions.target.host || this.proxyOptions.target;\n            const errorMessage = '[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)';\n            const errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n            this.logger.error(errorMessage, req.url, hostname, target, err.code || err, errReference);\n        };\n        this.config = config_factory_1.createConfig(context, opts);\n        this.proxyOptions = this.config.options;\n        // create proxy\n        this.proxy = httpProxy.createProxyServer({});\n        this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);\n        this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n        // attach handler to http-proxy events\n        handlers.init(this.proxy, this.proxyOptions);\n        // log errors for debug purpose\n        this.proxy.on('error', this.logError);\n        // https://github.com/chimurai/http-proxy-middleware/issues/19\n        // expose function to upgrade externally\n        this.middleware.upgrade = (req, socket, head) => {\n            if (!this.wsInternalSubscribed) {\n                this.handleUpgrade(req, socket, head);\n            }\n        };\n    }\n}\nexports.HttpProxyMiddleware = HttpProxyMiddleware;\n"]},"metadata":{},"sourceType":"script"}