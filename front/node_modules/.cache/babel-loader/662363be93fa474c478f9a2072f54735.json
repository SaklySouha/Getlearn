{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar errors_1 = require(\"./errors\");\n\nvar logger_1 = require(\"./logger\");\n\nvar logger = logger_1.getInstance();\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\n\nfunction createPathRewriter(rewriteConfig) {\n  var rulesCache;\n\n  if (!isValidRewriteConfig(rewriteConfig)) {\n    return;\n  }\n\n  if (_.isFunction(rewriteConfig)) {\n    var customRewriteFn = rewriteConfig;\n    return customRewriteFn;\n  } else {\n    rulesCache = parsePathRewriteRules(rewriteConfig);\n    return rewritePath;\n  }\n\n  function rewritePath(path) {\n    var result = path;\n\n    _.forEach(rulesCache, function (rule) {\n      if (rule.regex.test(path)) {\n        result = result.replace(rule.regex, rule.value);\n        logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n        return false;\n      }\n    });\n\n    return result;\n  }\n}\n\nexports.createPathRewriter = createPathRewriter;\n\nfunction isValidRewriteConfig(rewriteConfig) {\n  if (_.isFunction(rewriteConfig)) {\n    return true;\n  } else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n    return true;\n  } else if (_.isUndefined(rewriteConfig) || _.isNull(rewriteConfig) || _.isEqual(rewriteConfig, {})) {\n    return false;\n  } else {\n    throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);\n  }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n  var rules = [];\n\n  if (_.isPlainObject(rewriteConfig)) {\n    _.forIn(rewriteConfig, function (value, key) {\n      rules.push({\n        regex: new RegExp(key),\n        value: rewriteConfig[key]\n      });\n      logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n    });\n  }\n\n  return rules;\n}","map":{"version":3,"sources":["C:/Users/souha/Desktop/PFE MastÃ©re/Getlearn1/app_getlearn/front/node_modules/http-proxy-middleware/dist/path-rewriter.js"],"names":["Object","defineProperty","exports","value","_","require","errors_1","logger_1","logger","getInstance","createPathRewriter","rewriteConfig","rulesCache","isValidRewriteConfig","isFunction","customRewriteFn","parsePathRewriteRules","rewritePath","path","result","forEach","rule","regex","test","replace","debug","isEmpty","isPlainObject","isUndefined","isNull","isEqual","Error","ERRORS","ERR_PATH_REWRITER_CONFIG","rules","forIn","key","push","RegExp","info"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMG,MAAM,GAAGD,QAAQ,CAACE,WAAT,EAAf;AACA;;;;;;;AAMA,SAASC,kBAAT,CAA4BC,aAA5B,EAA2C;AACvC,MAAIC,UAAJ;;AACA,MAAI,CAACC,oBAAoB,CAACF,aAAD,CAAzB,EAA0C;AACtC;AACH;;AACD,MAAIP,CAAC,CAACU,UAAF,CAAaH,aAAb,CAAJ,EAAiC;AAC7B,QAAMI,eAAe,GAAGJ,aAAxB;AACA,WAAOI,eAAP;AACH,GAHD,MAIK;AACDH,IAAAA,UAAU,GAAGI,qBAAqB,CAACL,aAAD,CAAlC;AACA,WAAOM,WAAP;AACH;;AACD,WAASA,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAIC,MAAM,GAAGD,IAAb;;AACAd,IAAAA,CAAC,CAACgB,OAAF,CAAUR,UAAV,EAAsB,UAAAS,IAAI,EAAI;AAC1B,UAAIA,IAAI,CAACC,KAAL,CAAWC,IAAX,CAAgBL,IAAhB,CAAJ,EAA2B;AACvBC,QAAAA,MAAM,GAAGA,MAAM,CAACK,OAAP,CAAeH,IAAI,CAACC,KAApB,EAA2BD,IAAI,CAAClB,KAAhC,CAAT;AACAK,QAAAA,MAAM,CAACiB,KAAP,CAAa,wCAAb,EAAuDP,IAAvD,EAA6DC,MAA7D;AACA,eAAO,KAAP;AACH;AACJ,KAND;;AAOA,WAAOA,MAAP;AACH;AACJ;;AACDjB,OAAO,CAACQ,kBAAR,GAA6BA,kBAA7B;;AACA,SAASG,oBAAT,CAA8BF,aAA9B,EAA6C;AACzC,MAAIP,CAAC,CAACU,UAAF,CAAaH,aAAb,CAAJ,EAAiC;AAC7B,WAAO,IAAP;AACH,GAFD,MAGK,IAAI,CAACP,CAAC,CAACsB,OAAF,CAAUf,aAAV,CAAD,IAA6BP,CAAC,CAACuB,aAAF,CAAgBhB,aAAhB,CAAjC,EAAiE;AAClE,WAAO,IAAP;AACH,GAFI,MAGA,IAAIP,CAAC,CAACwB,WAAF,CAAcjB,aAAd,KACLP,CAAC,CAACyB,MAAF,CAASlB,aAAT,CADK,IAELP,CAAC,CAAC0B,OAAF,CAAUnB,aAAV,EAAyB,EAAzB,CAFC,EAE6B;AAC9B,WAAO,KAAP;AACH,GAJI,MAKA;AACD,UAAM,IAAIoB,KAAJ,CAAUzB,QAAQ,CAAC0B,MAAT,CAAgBC,wBAA1B,CAAN;AACH;AACJ;;AACD,SAASjB,qBAAT,CAA+BL,aAA/B,EAA8C;AAC1C,MAAMuB,KAAK,GAAG,EAAd;;AACA,MAAI9B,CAAC,CAACuB,aAAF,CAAgBhB,aAAhB,CAAJ,EAAoC;AAChCP,IAAAA,CAAC,CAAC+B,KAAF,CAAQxB,aAAR,EAAuB,UAACR,KAAD,EAAQiC,GAAR,EAAgB;AACnCF,MAAAA,KAAK,CAACG,IAAN,CAAW;AACPf,QAAAA,KAAK,EAAE,IAAIgB,MAAJ,CAAWF,GAAX,CADA;AAEPjC,QAAAA,KAAK,EAAEQ,aAAa,CAACyB,GAAD;AAFb,OAAX;AAIA5B,MAAAA,MAAM,CAAC+B,IAAP,CAAY,gDAAZ,EAA8DH,GAA9D,EAAmEzB,aAAa,CAACyB,GAAD,CAAhF;AACH,KAND;AAOH;;AACD,SAAOF,KAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst errors_1 = require(\"./errors\");\nconst logger_1 = require(\"./logger\");\nconst logger = logger_1.getInstance();\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\nfunction createPathRewriter(rewriteConfig) {\n    let rulesCache;\n    if (!isValidRewriteConfig(rewriteConfig)) {\n        return;\n    }\n    if (_.isFunction(rewriteConfig)) {\n        const customRewriteFn = rewriteConfig;\n        return customRewriteFn;\n    }\n    else {\n        rulesCache = parsePathRewriteRules(rewriteConfig);\n        return rewritePath;\n    }\n    function rewritePath(path) {\n        let result = path;\n        _.forEach(rulesCache, rule => {\n            if (rule.regex.test(path)) {\n                result = result.replace(rule.regex, rule.value);\n                logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n                return false;\n            }\n        });\n        return result;\n    }\n}\nexports.createPathRewriter = createPathRewriter;\nfunction isValidRewriteConfig(rewriteConfig) {\n    if (_.isFunction(rewriteConfig)) {\n        return true;\n    }\n    else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n        return true;\n    }\n    else if (_.isUndefined(rewriteConfig) ||\n        _.isNull(rewriteConfig) ||\n        _.isEqual(rewriteConfig, {})) {\n        return false;\n    }\n    else {\n        throw new Error(errors_1.ERRORS.ERR_PATH_REWRITER_CONFIG);\n    }\n}\nfunction parsePathRewriteRules(rewriteConfig) {\n    const rules = [];\n    if (_.isPlainObject(rewriteConfig)) {\n        _.forIn(rewriteConfig, (value, key) => {\n            rules.push({\n                regex: new RegExp(key),\n                value: rewriteConfig[key]\n            });\n            logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n        });\n    }\n    return rules;\n}\n"]},"metadata":{},"sourceType":"script"}